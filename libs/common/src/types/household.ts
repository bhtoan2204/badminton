// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: proto/household.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const householdProtobufPackage = 'household';

export interface FindOneHouseholdByIdRequest {
  idHousehold: number;
  idFamily: number;
}

export interface HouseholdResponse {
  householdItem: HouseholdItemRpc | undefined;
  room: RoomRpc | undefined;
  category: HouseholdItemCategoryRpc | undefined;
}

export interface HouseholdItemRpc {
  idHouseholdItem: number;
  idGuideItem: number;
  idFamily: number;
  itemName: string;
  description: string;
  itemImageurl: string;
  idCategory: number;
  idRoom: number;
  createdAt: string;
  updatedAt: string;
}

export interface RoomRpc {
  idRoom: number;
  idFamily: number;
  roomName: string;
  roomImage: string;
  createdAt: string;
  updatedAt: string;
}

export interface HouseholdItemCategoryRpc {
  idHouseholdItemCategory: number;
  categoryName: string;
}

export interface UpdateOneByIdRequest {
  idGuideItem: number;
  idFamily: number;
  idHouseholdItem: number;
}

export const HOUSEHOLD_PACKAGE_NAME = 'household';

export interface HouseholdServiceClient {
  findOneById(
    request: FindOneHouseholdByIdRequest,
  ): Observable<HouseholdResponse>;

  updateOneById(request: UpdateOneByIdRequest): Observable<HouseholdResponse>;
}

export interface HouseholdServiceController {
  findOneById(
    request: FindOneHouseholdByIdRequest,
  ):
    | Promise<HouseholdResponse>
    | Observable<HouseholdResponse>
    | HouseholdResponse;

  updateOneById(
    request: UpdateOneByIdRequest,
  ):
    | Promise<HouseholdResponse>
    | Observable<HouseholdResponse>
    | HouseholdResponse;
}

export function HouseholdServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['findOneById', 'updateOneById'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('HouseholdService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('HouseholdService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const HOUSEHOLD_SERVICE_NAME = 'HouseholdService';
