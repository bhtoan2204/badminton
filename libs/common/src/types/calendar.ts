// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: proto/calendar.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Empty } from './family';

export const calendarProtobufPackage = 'calendar';

export interface FindCalendarByFrequencyRequest {
  frequency: string;
}

export interface CreateDefaultChecklistTypeRequest {
  idFamily: number;
}

export interface CalendarResponse {
  idCalendar: number;
  idFamily: number;
  category: number;
  title: string;
  description: string;
  timeStart: string;
  timeEnd: string;
  allDay: boolean;
  location: string;
  color: string;
  startTimezone: string;
  endTimezone: string;
  recurrenceId: number;
  recurrenceException: string;
  recurrenceRule: string;
  createdAt: string;
  updatedAt: string;
}

export interface FindCalendarByFrequencyResponse {
  calendar: CalendarResponse[];
}

export interface FindOneByIdRequest {
  idCalendar: number;
}

export interface FindNonRepeatCalendarResponse {
  calendar: CalendarResponse[];
}

export const CALENDAR_PACKAGE_NAME = 'calendar';

export interface CalendarServiceClient {
  findCalendarByFrequency(
    request: FindCalendarByFrequencyRequest,
  ): Observable<FindCalendarByFrequencyResponse>;

  findOneById(request: FindOneByIdRequest): Observable<CalendarResponse>;

  findNonRepeatCalendar(
    request: Empty,
  ): Observable<FindNonRepeatCalendarResponse>;

  createDefaultChecklistType(
    request: CreateDefaultChecklistTypeRequest,
  ): Observable<Empty>;
}

export interface CalendarServiceController {
  findCalendarByFrequency(
    request: FindCalendarByFrequencyRequest,
  ):
    | Promise<FindCalendarByFrequencyResponse>
    | Observable<FindCalendarByFrequencyResponse>
    | FindCalendarByFrequencyResponse;

  findOneById(
    request: FindOneByIdRequest,
  ):
    | Promise<CalendarResponse>
    | Observable<CalendarResponse>
    | CalendarResponse;

  findNonRepeatCalendar(
    request: Empty,
  ):
    | Promise<FindNonRepeatCalendarResponse>
    | Observable<FindNonRepeatCalendarResponse>
    | FindNonRepeatCalendarResponse;

  createDefaultChecklistType(
    request: CreateDefaultChecklistTypeRequest,
  ): Promise<Empty> | Observable<Empty> | Empty;
}

export function CalendarServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'findCalendarByFrequency',
      'findOneById',
      'findNonRepeatCalendar',
      'createDefaultChecklistType',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CalendarService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CalendarService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const CALENDAR_SERVICE_NAME = 'CalendarService';
