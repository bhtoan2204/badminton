// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: proto/family.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const familyProtobufPackage = 'family';

export interface GerUserIdsRequest {
  idFamily: number;
}

export interface GerUserIdsResponse {
  idUser: string[];
}

export interface GetFamilyRequest {
  idFamily: number;
}

export interface GetFamilyResponse {
  idFamily: number;
  quantity: number;
  name: string;
  description: string;
  ownerId: string;
  createdAt: string;
  updatedAt: string;
  expiredAt: string;
  avatar: string;
}

export interface GetFamiliesRequest {
  idFamilies: number[];
}

export interface GetFamiliesResponse {
  families: any[];
}

export const FAMILY_PACKAGE_NAME = 'family';

export interface FamilyServiceClient {
  findById(request: GetFamilyRequest): Observable<any>;

  findByIds(request: GetFamiliesRequest): Observable<GetFamiliesResponse>;

  findIdsUserInFamily(
    request: GerUserIdsRequest,
  ): Observable<GerUserIdsResponse>;
}

export interface FamilyServiceController {
  findById(request: GetFamilyRequest): Promise<any> | Observable<any> | any;

  findByIds(
    request: GetFamiliesRequest,
  ):
    | Promise<GetFamiliesResponse>
    | Observable<GetFamiliesResponse>
    | GetFamiliesResponse;

  findIdsUserInFamily(
    req: GerUserIdsRequest,
  ):
    | Promise<GerUserIdsResponse>
    | Observable<GerUserIdsResponse>
    | GerUserIdsResponse;
}

export function FamilyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'findById',
      'findByIds',
      'findIdsUserInFamily',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('FamilyService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('FamilyService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const FAMILY_SERVICE_NAME = 'FamilyService';
